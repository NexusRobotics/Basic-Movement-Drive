package org.usfirst.frc.team5787.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
//import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 * 
 * 
 */
public class Robot extends IterativeRobot {
	//final String tankTeleop = "Tank";
	//final String arcadeTeleop = "Arcade";
	//String teleopSelected;
	//SendableChooser<String> chooser = new SendableChooser<>();
	
	DifferentialDrive drive;
	Joystick leftstick;
	XboxController xbox;
	Timer timer;
	
	Spark leftFront, leftBack, rightFront, rightBack;
	SpeedControllerGroup m_left, m_right;
	

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		//chooser.addDefault("Tank", tankTeleop);
		//chooser.addObject("Arcade", arcadeTeleop);
		//SmartDashboard.putData("Teleop choices", chooser);
		
		leftFront  = new Spark(3);
		leftBack   = new Spark(2);
		rightFront = new Spark(0);
		rightBack  = new Spark(1);
		m_left  = new SpeedControllerGroup(leftFront,leftBack);
		m_right = new SpeedControllerGroup(rightFront,rightBack);
		drive = new DifferentialDrive(m_left,m_right);
		xbox = new XboxController(0);
		leftFront.setInverted(true);
		leftBack.setInverted(true);
		rightFront.setInverted(true);
		rightBack.setInverted(true);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void teleopInit() {
		//teleopSelected = chooser.getSelected();
		//System.out.println("Teleop selected: " + teleopSelected);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		//switch (teleopSelected) {
		//case arcadeTeleop:
			//drive.arcadeDrive(xbox.getY(GenericHID.Hand.kLeft)*0.3D, xbox.getX(GenericHID.Hand.kLeft),false);
			//break;
		//case tankTeleop:
		//default:
			drive.tankDrive(xbox.getY(GenericHID.Hand.kLeft)*0.3D, xbox.getY(GenericHID.Hand.kRight)*0.3D,false);
			//break;
		//}
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
}

