package org.usfirst.frc.team5787.robot;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 * 
 * 
 */
public class Robot extends IterativeRobot {
	public boolean arcademode = false;
	DifferentialDrive drive;
	XboxController xbox;
	double speed = 0.3D;
	
	Spark leftFront, leftBack, rightFront, rightBack;
	SpeedControllerGroup m_left, m_right;
	

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		//chooser.addDefault("Tank", tankTeleop);
		//chooser.addObject("Arcade", arcadeTeleop);
		//SmartDashboard.putData("Teleop choices", chooser);
		
		leftFront  = new Spark(3);
		leftBack   = new Spark(2);
		rightFront = new Spark(0);
		rightBack  = new Spark(1);
		m_left  = new SpeedControllerGroup(leftFront,leftBack);
		m_right = new SpeedControllerGroup(rightFront,rightBack);
		drive = new DifferentialDrive(m_left,m_right);
		xbox = new XboxController(0);
		m_left.setInverted(true);
		m_right.setInverted(true);
	}

	@Override
	public void teleopInit() {
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		//toggle drive mode
		if (xbox.getYButtonPressed()) {
			if (arcademode)
				arcademode = false;
			else if (!arcademode)
				arcademode = true;
		}
		//turbo button
		if (xbox.getBumperPressed(GenericHID.Hand.kRight)) {
				speed = 1D;
		}
		if (xbox.getBumperReleased(GenericHID.Hand.kRight)) {
			speed = 0.3D;
		}
			
		
		if (arcademode)
			drive.arcadeDrive(xbox.getY(GenericHID.Hand.kLeft)*speed, xbox.getX(GenericHID.Hand.kLeft)*speed*-1D,false);
		else
			drive.tankDrive(xbox.getY(GenericHID.Hand.kLeft)*speed, xbox.getY(GenericHID.Hand.kRight)*speed,false);
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
}
